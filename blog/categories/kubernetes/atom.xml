<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kubernetes | A D Vishnu Prasad]]></title>
  <link href="http://advishnuprasad.github.io/blog/categories/kubernetes/atom.xml" rel="self"/>
  <link href="http://advishnuprasad.github.io/"/>
  <updated>2023-02-13T08:42:04+05:30</updated>
  <id>http://advishnuprasad.github.io/</id>
  <author>
    <name><![CDATA[A D Vishnu Prasad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloud Agnostic Microservice Deployment Architecture Using Kubernetes]]></title>
    <link href="http://advishnuprasad.github.io/blog/2021/07/27/cloud-agnostic-microservice-deployment-using-kubernetes/"/>
    <updated>2021-07-27T08:46:34+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2021/07/27/cloud-agnostic-microservice-deployment-using-kubernetes</id>
    <content type="html"><![CDATA[<p>A typical web app contains the following microservices.</p>

<blockquote><ul>
<li>API (Flask / FastAPI / Rails)</li>
<li>Worker (Celery / Sidekiq)</li>
<li>Frontend (React / Angular)</li>
<li>Redis (Cache)</li>
<li>Postgres (Database)</li>
</ul>
</blockquote>

<p>We will use kubernetes to deploy these microservices.</p>

<p>We won&rsquo;t use s3 for frontend deployment even though it is easy to deploy cloudfront + s3 combination.
But then we would have a dependency on s3 which is only available in AWS.
(You should use s3 if you know AWS is going to be your only cloud)</p>

<h3>Architecture</h3>

<p><img src="/images/k8s-arch.png" alt="Architecture" /></p>

<p>Using this design, you just need kubernetes manifests. You can use the same in any cloud providers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade Kubernetes Version in AWS EKS]]></title>
    <link href="http://advishnuprasad.github.io/blog/2019/09/26/upgrade-kubernetes-version-in-eks/"/>
    <updated>2019-09-26T23:55:25+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2019/09/26/upgrade-kubernetes-version-in-eks</id>
    <content type="html"><![CDATA[<p>There are two things you need to do to upgrade Kubernetes in EKS.</p>

<p>Unlike <code>Azure AKS</code> where you can upgrade with a single button, in <code>AWS EKS</code> you need
to upgrade the cluster and worker nodes separately.</p>

<h3>Upgrade Cluster</h3>

<p>=> Login into AWS console.</p>

<p>=> Go to EKS services.</p>

<p>=> Click on Clusters</p>

<p><img src="/images/update_cluster.jpg" alt="Cluster Upgrade" /></p>

<h3>Upgrade Worker Nodes</h3>

<p>Reference Link: <a href="https://docs.aws.amazon.com/eks/latest/userguide/update-stack.html">https://docs.aws.amazon.com/eks/latest/userguide/update-stack.html</a></p>

<h4>Step 1:</h4>

<p>Go to Worker node cloud formation stack and click on <code>Update</code></p>

<h4>Step 2:</h4>

<p>Click on &ldquo;Replace current template&rdquo;</p>

<p>Paste the following URL: <a href="https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-09-17/amazon-eks-nodegroup.yaml">https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-09-17/amazon-eks-nodegroup.yaml</a></p>

<p>Click &ldquo;Next&rdquo;</p>

<p><img src="/images/update_stack_1.jpg" alt="Worker Node 1" /></p>

<h4>Step 3:</h4>

<p>Update the following parameters
<code>
NodeAutoScalingGroupDesiredCapacity = NodeAutoScalingGroupDesiredCapacity
</code></p>

<pre><code>NodeAutoScalingGroupMaxSize = NodeAutoScalingGroupDesiredCapacity + 1 (or more)
(It must be more than what you have)
</code></pre>

<pre><code>NodeImageIdSSMParam = /aws/service/eks/optimized-ami/`1.14`/amazon-linux-2/recommended/image_id
(If your cluster version is 1.13 change it to 1.13. Ideally it should match with the Cluster version. Otherwise the upgrade won't work.
You will end up in `matchnodeselector` error and `NotReady` status)
</code></pre>

<p>Leave the other fields to default</p>

<p>Click &ldquo;Next&rdquo;</p>

<p><img src="/images/update_stack_2.jpg" alt="Worker Node 2" /></p>

<h4>Step 4:</h4>

<p>Go to last page and check the box. Click &ldquo;Update&rdquo;</p>

<p><img src="/images/update_stack_3.jpg" alt="Worker Node 3" /></p>

<p>Once the stack is updated, Connect to your cluster. You should see your version upgraded to 1.14</p>

<p><code>kubectl get nodes</code></p>

<p><img src="/images/final.jpg" alt="Final" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kubernetes- Elasticsearch Scheduled Backup and Retention Using Curator]]></title>
    <link href="http://advishnuprasad.github.io/blog/2018/10/07/kubernetes-elasticsearch-scheduled-backup-and-retention-using-curator/"/>
    <updated>2018-10-07T21:54:58+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2018/10/07/kubernetes-elasticsearch-scheduled-backup-and-retention-using-curator</id>
    <content type="html"><![CDATA[<p>This post will guide you to create a scheduled elasticsearch backup using curator in k8s cluster.</p>

<h4>Assumptions:</h4>

<pre><code>You already have a 6.x.x elasticsearch k8s cluster
You already have a backup system
You are some what familiar with Kubernetes
You are familiar with curator configs
</code></pre>

<h4>Step 1: Create a configmap with curator yml</h4>

<pre><code>Action 1 will create a snapshot
Action 2 will keep last 20 days snapshots and delete that are older than 20 days
</code></pre>

<p>curator.yml
<code>
apiVersion: v1
kind: ConfigMap
metadata:
  name: curator-config
  labels:
    app: curator
data:
  backup.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    #
    # Also remember that all examples have 'disable_action' set to True.  If you
    # want to use this action as a template, be sure to set this to False after
    # copying it.
    actions:
      1:
        action: snapshot
        description: "Create snapshot"
        options:
          repository: "primary_backup"
          continue_if_exception: False
          wait_for_completion: True
        filters:
          - filtertype: pattern
            kind: regex
            value: ".*$"
      2:
        action: delete_snapshots
        description: &gt;-
          Delete snapshots from the selected repository older than 10 days
          (based on creation_date), for 'curator-' prefixed snapshots.
        options:
          repository: "primary_backup"
          disable_action: False
        filters:
          - filtertype: pattern
            kind: prefix
            value: curator-
            exclude:
          - filtertype: age
            source: creation_date
            direction: older
            unit: days
            unit_count: 20
  config.yml: |-
    ---
    # Remember, leave a key empty if there is no value.  None will be a string,
    # not a Python "NoneType"
    client:
      hosts:
        - elasticsearch
      port: 9200
      url_prefix:
      use_ssl: False
      certificate:
      client_cert:
      client_key:
      ssl_no_validate: False
      http_auth:
      timeout: 30
      master_only: False
    logging:
      loglevel: DEBUG
</code></p>

<h4>Step 2: Create a config map in your kubernetes cluster</h4>

<pre><code>kubectl apply -f curator.yml
</code></pre>

<h4>Step 3: Create a cronjob</h4>

<p>es_cronjob.yml</p>

<pre><code>apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: esbackup
  labels:
    app: esbackup
spec:
  schedule: "@daily"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 120
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - image: bobrik/curator:5.5.4
            name: curator
            args: ["--config", "/etc/config/config.yml", "/etc/config/backup.yml"]
            volumeMounts:
            - name: config
              mountPath: /etc/config
          volumes:
          - name: config
            configMap:
              name: curator-config
          restartPolicy: Never
</code></pre>

<h4>Step 4: Create cronjob in kubernetes</h4>

<p>This cronjob will run everyday 00:00 hrs
<code>
kubectl create -f es_cronjob.yml
</code></p>

<p>Reference:</p>

<ul>
<li><a href="https://medium.com/@hagaibarel/running-curator-as-a-kubernetes-cronjob-19eaab9afd3b">https://medium.com/@hagaibarel/running-curator-as-a-kubernetes-cronjob-19eaab9afd3b</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_snapshots.html">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_snapshots.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
