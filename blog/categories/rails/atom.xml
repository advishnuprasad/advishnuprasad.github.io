<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | A D Vishnu Prasad]]></title>
  <link href="http://advishnuprasad.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://advishnuprasad.github.io/"/>
  <updated>2016-08-21T13:59:52+05:30</updated>
  <id>http://advishnuprasad.github.io/</id>
  <author>
    <name><![CDATA[A D Vishnu Prasad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate API Documentation Using Rspec Acceptance Tests]]></title>
    <link href="http://advishnuprasad.github.io/blog/2016/02/07/api-docs-using-rspecs/"/>
    <updated>2016-02-07T11:43:58+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2016/02/07/api-docs-using-rspecs</id>
    <content type="html"><![CDATA[<h4>Step 1:</h4>

<p>Install required gems</p>

<pre><code class="ruby">gem 'rspec_api_documentation'
gem 'raddocs'
</code></pre>

<h4>Step 2:</h4>

<p>Create acceptance_helper.rb in spec folder</p>

<pre><code class="ruby acceptance_helper.rb">require 'rails_helper'
require 'rspec_api_documentation'
require 'rspec_api_documentation/dsl'

RspecApiDocumentation.configure do |config|
  config.format = :json
  config.curl_host = 'http://fysquare.dev' # Will be used in curl request
  config.api_name = "FySquare API" # Your API name
  config.request_headers_to_include = ["Host", "Content-Type"]
  config.response_headers_to_include = ["Host", "Content-Type"]
  config.curl_headers_to_filter = ["Authorization"] # Remove this if you want to show Auth headers in request
  config.keep_source_order = true
end
</code></pre>

<p>Create raddoc.rb in initializers</p>

<pre><code class="ruby raddoc.rb">Raddocs.configure do |config|
  config.api_name = "FySquare API Documentation"
end
</code></pre>

<p>Add API route in config.rb</p>

<pre><code class="ruby routes.rb">mount Raddocs::App =&gt; "/api_docs"
end
</code></pre>

<h4>Step 3:</h4>

<p>Now you need to write acceptance specs which will be used to generate docs.</p>

<p>Below is the spec for listing users API. You can change the params depends on your API.</p>

<pre><code class="ruby users_spec.rb">require 'acceptance_helper'

resource "User", acceptance: true do
  let(:user) { FactoryGirl.create(:user) }
  before do
    header 'Authorization', 'Auth code'
    header 'Content-Type', 'application/json'
  end

  get "/api/users" do
    example_request "Listing Users" do
      explanation "List all the users in the system"
      expect(status).to eq 200
    end

    parameter :ids, "List of user ids to be fetched"
    parameter :email, "Search users by email"
    parameter :page, "Page to view"
    example "Get users by params" do
      explanation "Get users by params"

      do_request(:ids =&gt; [user.id])
      expect(status).to eq 200

      do_request(:email =&gt; ['foo@example.com', 'doo@example.com'])
      expect(status).to eq 200

    end
  end

  get "/api/users/:id" do
    let(:id) { user.id }
    example_request "Getting a specific user" do
      expect(status).to eq(200)
    end
  end
end
</code></pre>

<h4>Step 4:</h4>

<p>Run this rake command to generate API.</p>

<pre><code class="ruby">rake docs:generate
</code></pre>

<p>Now navigate to <code>localhost:3000/docs</code></p>

<p><img src="/images/api_doc1.png" alt="API docs image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Model Serializers]]></title>
    <link href="http://advishnuprasad.github.io/blog/2014/11/14/active-model-serializers/"/>
    <updated>2014-11-14T19:42:22+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2014/11/14/active-model-serializers</id>
    <content type="html"><![CDATA[<h3>When to use active model serializer ?</h3>

<p>When you have your app running on both browser and mobile app, and if you have a backend rails server then active model serialiser is a perfect gem for serving APIs.</p>

<h3>Gems</h3>

<p>There are other gems like rabl but I personally prefer <code>active_model_serializers</code> gem because this is extremely easy to use and it has lot of + points.</p>

<h4>Step 1 : Add it to your Gemfile</h4>

<pre><code class="ruby">gem 'active_model_serializers', '~&gt; 0.9.3'
</code></pre>

<h4>Step 2 : Create a serializer</h4>

<p>Create a serializer file by running
<code>ruby
rails g serializer user
</code>
which will create <code>app/serializers/user_serializer.rb</code></p>

<h4>Step 3 :</h4>

<p>In serializer, you can add attributes, associations, custom methods.</p>

<pre><code class="ruby user_serializer.rb">class UserSerializer &lt; ActiveModel::Serializer
  attributes :id, :name, :followers, :timestamp
end
</code></pre>

<p>So here id and name are user fields. Followers is an association in user. timestamp is a custom method.</p>

<p>You can define that method like this.</p>

<pre><code class="ruby">def timestamp
  object.created_at.strftime(“%B %d %Y”)
end       
</code></pre>

<h4>Step 4 :</h4>

<p>In your controller, make sure you are rendering json and html
<code>ruby
respond_with @user
</code></p>

<p>When you visit <code>/users/1.json</code></p>

<pre><code class="json   ">{
    "user": {
        "id": 1,
        "email": "foodoo@example.com",
        "name": "Foo doo",
        "microposts": [
            {
                "id": 1,
                "content": "This is a micropost",
                "user_id": 1,
                "created_at": "2014-11-11T16:11:08.500Z",
                "updated_at": "2014-11-11T16:11:08.500Z"
            }
        ],
        "followers": [ ]
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetch Records From Sql Query - Ruby on Rails - Oci8 Cursor]]></title>
    <link href="http://advishnuprasad.github.io/blog/2014/03/14/fetch-records-from-sql-query-ruby-on-rails-oci8-cursor/"/>
    <updated>2014-03-14T18:50:26+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2014/03/14/fetch-records-from-sql-query-ruby-on-rails-oci8-cursor</id>
    <content type="html"><![CDATA[<p>There might be time when you can&rsquo;t use ActiveRecord finders but have to write custom
queries to fetch the records.</p>

<p>Below example is to fetch records using oci8 adapter.(i.e If you are using oracle db)</p>

<pre><code class="ruby">users = ActiveRecord::Base.connection.execute("select id, email from users" )
</code></pre>

<p>The output will be</p>

<pre><code class="ruby  ">&lt;OCI8::Cursor:0xf73ac30&gt;
</code></pre>

<p>which is nothing but a cursor object.
But how to read the records from this cursor?.</p>

<pre><code class="ruby">while r = users.fetch_hash
   puts users
end
</code></pre>

<p>The output will be</p>

<pre><code class="json  ">{"ID"=&gt;10005, "EMAIL"=&gt;"2@gmail.com"}
{"ID"=&gt;10006, "EMAIL"=&gt;"3@gmail.com"}
{"ID"=&gt;10002, "EMAIL"=&gt;"1@gmail.com"}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find Type of the Request in Controller]]></title>
    <link href="http://advishnuprasad.github.io/blog/2012/12/15/find-type-of-the-request-in-controller/"/>
    <updated>2012-12-15T07:51:00+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2012/12/15/find-type-of-the-request-in-controller</id>
    <content type="html"><![CDATA[<p>Is there any way to find the type of request in controller ?</p>

<h4>Yes.</h4>

<p>What we do in <code>routes.rb</code> is , define the type of request to particular action.</p>

<p>But, what If we want to find out the type of request in controller .</p>

<pre><code class="ruby">if request.get?
   logger.info "Request is GET"
elsif request.post?
   logger.info "Request is POST"
elsif request.xhr?
   logger.info "Request is AJAX"
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Request in Ruby on Rails (UJS)]]></title>
    <link href="http://advishnuprasad.github.io/blog/2012/10/10/ajax-request-in-ruby-on-rails-ujs/"/>
    <updated>2012-10-10T06:09:19+05:30</updated>
    <id>http://advishnuprasad.github.io/blog/2012/10/10/ajax-request-in-ruby-on-rails-ujs</id>
    <content type="html"><![CDATA[<p>Many programmer uses jquery to catch click event and do $.get or $.post to access the server and print the response in a required div.</p>

<p>But there is a handy way to do ajax request using UJS provided by Rails .</p>

<p>Let us take an example of <code>add to wish list</code> event.</p>

<p>This can be easily achieved in three easy steps.
Now lets see how to do that in rails using UJS</p>

<h4>Step 1:</h4>

<p>In view(<code>show.haml.html</code>) your may have</p>

<pre><code class="ruby  ">= link_to "Add to wishlist" , wish_list_path(@product) ,:id =&gt; "wish_list_link"
</code></pre>

<p>Now we make it as ajax request by adding <code>:remote =&gt; true</code></p>

<pre><code class="ruby  ">= link_to "Add to wishlist" , wish_list_path(@product) ,:id =&gt; "wish_list_link" ,:remote =&gt; true
</code></pre>

<h4>Step 2:</h4>

<p>Now in controller</p>

<pre><code class="ruby products_controller.rb">def wish_list
  #adding wish list 
  respond_to do |format|
     format.js #This line is important
   end
end 
</code></pre>

<h4>Step 3:</h4>

<p>Now create a file named wish_list.js.erb</p>

<pre><code class="erb wish_list.js.erb">$("#wish_list_link").html(''&lt;b&gt;added to wishlist&lt;/b&gt;");

# Lets say you want to render a partial .

$("#wish_list_linkt").html('&lt;%= escape_javascript(render :partial =&gt; "wish_list" , :locals =&gt; { :product =&gt; @product})%&gt;');
</code></pre>

<h4>Step 4(optional):</h4>

<p>You can use jquery to show the loading part while server is responding</p>

<pre><code class="ruby ">$("#wish_list_link").live("click",function(){
    #show_loading_img
})
</code></pre>

<p>That&rsquo;s it. As simple as that.</p>
]]></content>
  </entry>
  
</feed>
